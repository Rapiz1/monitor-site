{"version":3,"sources":["api.js","App.jsx","config.js","reportWebVitals.js","index.js"],"names":["AV","require","SERVER_STATUS","CloudIcon","props","serverStatus","style","color","green","red","ServerItem","server","status","Math","abs","lastUpdate","Date","getTime","ListItem","button","ListItemIcon","ListItemText","primary","host","className","Chip","label","toLocaleString","variant","ServerList","skeletonItem","Skeleton","width","skeletons","loading","serverNum","Number","localStorage","getItem","i","push","setItem","servers","length","Paper","List","map","e","App","state","init","appId","process","appKey","Query","find","then","ret","forEach","x","toFullJSON","s","setState","Container","maxWidth","Typography","margin","this","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98480946.chunk.js","sourcesContent":["import { APP_KEY, APP_ID } from \"./config.js\";\n\nconst AV = require(\"leancloud-storage\");\n\nexport const SERVER_STATUS = {\n  ONLINE: 0,\n  OFFLINE: 1,\n  ABORTED: 2,\n};\n\n// eslint-disable-next-line no-unused-vars\nconst fakeData = [\n  {\n    host: \"unraidarch\",\n    lastUpdate: 1617954550,\n    status: \"online\",\n  },\n  {\n    host: \"tower\",\n    lastUpdate: 1617935392,\n    status: \"offline\",\n  },\n  {\n    host: \"810openwrt\",\n    lastUpdate: 1617935392,\n    status: \"offline\",\n  },\n];\n\nexport function GetServers() {\n  const query = new AV.Query(\"Server\");\n  return query.find().then((e) => {\n    const ret = [];\n    e.forEach((x) => ret.push(x.toFullJSON()));\n    return ret;\n  });\n}\n\nexport function ApiInit() {\n  AV.init({\n    appId: APP_ID,\n    appKey: APP_KEY,\n  });\n}\n","import './App.css';\nimport { GetServers, SERVER_STATUS, ApiInit } from './api'\nimport { THRESHOLD } from './config'\n\nimport React from 'react';\n\nimport \"@fontsource/roboto\"\nimport { Container, Typography, ListItem, ListItemText, List, ListItemIcon, Paper, Chip } from '@material-ui/core';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport green from '@material-ui/core/colors/green';\nimport red from '@material-ui/core/colors/red';\nimport CloudDoneIcon from '@material-ui/icons/CloudDone';\nimport CloudOffIcon from '@material-ui/icons/CloudOff';\n\nfunction CloudIcon(props) {\n  if (props.serverStatus === SERVER_STATUS.ONLINE)\n    return <CloudDoneIcon style={{color: green[500]}} />\n  else if (props.serverStatus === SERVER_STATUS.OFFLINE)\n    return <CloudOffIcon color='disabled' />\n  else\n    return <CloudOffIcon style={{color: red[500]}} />\n}\n\nfunction ServerItem(props) {\n  let serverStatus = props.server.status === 'online' ? SERVER_STATUS.ONLINE : SERVER_STATUS.OFFLINE\n  if (serverStatus === SERVER_STATUS.ONLINE && Math.abs(props.server.lastUpdate - new Date().getTime()/1000) > THRESHOLD)\n    serverStatus = SERVER_STATUS.ABORTED\n  return (\n      <ListItem button>\n        <ListItemIcon>\n          <CloudIcon serverStatus={serverStatus}/>\n        </ListItemIcon>\n        <ListItemText primary={props.server.host} className=\"host-name\"/>\n        <Chip label={new Date(props.server.lastUpdate*1000).toLocaleString()} variant=\"outlined\" />\n      </ListItem>\n  )\n}\n\nfunction ServerList(props) {\n  const skeletonItem = (\n  <ListItem button>\n    <ListItemIcon>\n      <Skeleton><CloudIcon/></Skeleton>\n    </ListItemIcon>\n    <Skeleton width='100%'/>\n  </ListItem>\n  )\n  let skeletons = []\n  if (props.loading) {\n    let serverNum = Number(localStorage.getItem('serverNum'))\n    if (!serverNum) serverNum = 3\n    for (let i = 0; i < serverNum; i++) skeletons.push(skeletonItem)\n  } else {\n    localStorage.setItem('serverNum', props.servers.length)\n  }\n  return (\n    props.loading ? \n    <Paper>\n      {skeletons}\n    </Paper>\n    :\n    <Paper>\n    <List>\n      {\n        props.servers.map(e => \n          <ServerItem server={e}/>\n        )\n      }\n    </List></Paper>\n  )\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      servers: [],\n      loading: true\n    }\n    ApiInit()\n  }\n\n  componentDidMount() {\n    GetServers().then(s => {\n      this.setState({servers: s, loading: false})\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container maxWidth=\"sm\">\n          <Typography variant=\"h1\" style={{margin: '0.2em'}}>\n            UniqueLab Monitor\n          </Typography>\n          <ServerList servers={this.state.servers} loading={this.state.loading}/>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const THRESHOLD = 75\n\nexport const APP_ID = process.env['REACT_APP_ID']\nexport const APP_KEY = process.env['REACT_APP_KEY']\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}